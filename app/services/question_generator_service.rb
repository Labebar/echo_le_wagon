require 'json'

class QuestionGeneratorService
  def initialize(transcription)
    # Si transcription est un tableau (venant de SupaData), on extrait seulement le texte.
    @transcription = if transcription.is_a?(Array)
                       transcription.map { |seg| seg["text"] }.join(" ")
                     else
                       transcription
                     end
    @client = OpenAI::Client.new(access_token: ENV['OPENAI_API_KEY'])
  end

  def call
    prompt = <<~PROMPT
      Tu es un assistant p√©dagogique sp√©cialis√© dans la cr√©ation de quiz pour des √©tudiants de niveau universitaire.

      √Ä partir du texte ci-dessous, g√©n√®re **une seule** question √† choix multiples (QCM) pertinente pour tester la compr√©hension du contenu.

      ### ‚ùå Interdictions :
      - Ne fais aucune r√©f√©rence √† la transcription, √† une vid√©o, √† un auteur ou √† une plateforme.
      - La question et ses r√©ponses doivent √™tre **autonomes et compr√©hensibles seules**.
      - N‚Äôinvente aucune information absente du texte.
      - Ne r√©p√®te pas des questions pr√©c√©dentes si appel√©es plusieurs fois.

      ### üéØ Objectif :
      - Couvrir **un concept distinct** abord√© dans le texte.
      - La question doit √™tre claire, pr√©cise et pertinente.
      - Varie le style : d√©finition, cause/effet, application, d√©duction, vrai/faux, comparaison, etc.

      ### üß† Pour la question :
      - Propose une question claire.
      - Donne 4 choix de r√©ponse :
        - A : Bonne r√©ponse
        - B, C, D : R√©ponses incorrectes mais cr√©dibles
      - Indique la lettre de la bonne r√©ponse.
      - Donne une explication br√®ve et p√©dagogique, **sans jamais mentionner le texte d‚Äôorigine**.

      ### üì¶ Format strict :
      Retourne un **objet JSON** au format suivant :
      {
        "question": "Texte de la question",
        "choices": {
          "A": "R√©ponse A",
          "B": "R√©ponse B",
          "C": "R√©ponse C",
          "D": "R√©ponse D"
        },
        "correct_answer": "Lettre de la bonne r√©ponse",
        "explanation": "Br√®ve justification sans mention du texte ou de la vid√©o"
      }

      Voici le texte √† analyser :

      #{@transcription}
    PROMPT

    puts "Prompt to OpenAI:"
    p prompt

    response = @client.chat(
      parameters: {
        model: "gpt-4o",
        messages: [{ role: "user", content: prompt }],
        temperature: 0.7
      }
    )

    content = response.dig("choices", 0, "message", "content")
    return nil unless content

    begin
      json_text = content.dup
      json_text.gsub!(/\A```json\s*/, '')
      json_text.gsub!(/```+\s*\z/, '')
      json_text = json_text[/\{.*\}/m]

      raise "Aucun JSON d√©tect√©" unless json_text

      JSON.parse(json_text, symbolize_names: true)
    rescue => e
      Rails.logger.error("Erreur dans QuestionGeneratorService : #{e.message}")
      Rails.logger.error("Contenu brut re√ßu : #{content.inspect}")
      nil
    end
  end
end
